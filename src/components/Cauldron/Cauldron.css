.cauldron {
  &, .cauldron-bg {
    position: relative;
    width: 836px;
    height: 303px;
    /* background: white; */
    opacity: 1;
  }
  & {
    /* will change in DiscoveredOverlay.discovered-overlay-opened.css */
    transition: left 2s ease-in, opacity 2s ease-in;
    left: 200px;
  }
  .cauldron-bg {
    position: absolute;
    left: 0px;
    top: 0px;
    background: transparent url(/cauldron.png) left top no-repeat;
  }
  .cauldron-wave {
    & {
      position: absolute;
      width: 140px;
      height: 38px;
      background: transparent url(/cauldron-wave.png) left top no-repeat;
      animation: cauldron-wave 9s ease-in-out 0s infinite;
    }
    &.cauldron-wave-0 {
      left: 190px;
      top: 60px;
      animation-delay: -12.3s;
    }
    &.cauldron-wave-1 {
      left: 500px;
      top: 100px;
      animation-delay: -23.4s;
    }
    &.cauldron-wave-2 {
      left: 250px;
      top: 180px;
      animation-delay: -34.5s;
    }
    &.cauldron-wave-3 {
      left: 150px;
      top: 160px;
      animation-delay: -7s;
    }
    &.cauldron-wave-4 {
      left: 260px;
      top: 140px;
      animation-delay: -9.7s;
    }
  }
  .cauldron-icon {
    & {
        position: absolute;
        left: 0px;
        top: 0px;
        cursor: pointer; /* maybe, macos fallback */
        cursor: alias;
    }
    &.cauldron-icon-0 {
        left: 150px;
        top: 60px;
    }
    &.cauldron-icon-1 {
      left: 580px;
      top: 15px;
    }
    &.cauldron-icon-2 {
      left: 400px;
      top: 90px;
    }
    .cauldron-icon-container {
        position: relative;
        animation: cauldron-icon-container 10s ease-in-out infinite;
/* FIXME: size for emoji, e.g. if .mdIcon === "âŒš", or ðŸŽª, or Ð© */
        min-width: var(--incauldron-icon-size);
        height: calc(var(--incauldron-icon-size) * 1.5);
        margin-top: 0px;
        box-sizing: content-box;
        border-bottom: 0px solid transparent;
        transition: margin-top 0.2s linear, border-bottom-width 0.2s linear;
    }
    &.cauldron-icon-0 .cauldron-icon-container {
        animation-duration: 11s;
    }
    &.cauldron-icon-1 .cauldron-icon-container {
        animation-duration: 9.3s;
        animation-delay: -7.5s;
    }
    &.cauldron-icon-2 .cauldron-icon-container {
        animation-duration: 13.3s;
        animation-delay: -1.23s;
    }
    .material-symbols-outlined {
        position: absolute;
        left: 0px;
        top: 0px;
        font-size: var(--incauldron-icon-size);
        overflow: hidden;
        color: rgb(94 55 0);
    }
    .cauldron-icon-under-the-sea {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 40%;
        overflow: hidden;
        opacity: 1;
    }
    .cauldron-icon-over-the-sea {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        opacity: 0.3;
    }
    .cauldron-icon-over-the-sea .material-symbols-outlined {
        bottom: 0px;
        text-shadow: 2px 2px 5px aqua;
    }
    .cauldron-icon-under-the-sea, .cauldron-icon-over-the-sea {
      transition: height 0.2s linear;
    }
    &:hover .cauldron-icon-container {
      margin-top: -30px;
      border-bottom: 30px solid transparent;
      animation-play-state: paused;
    }
    &:hover .cauldron-icon-under-the-sea {
      height: 80%;
      /* top: -30px; */
    }
    &:hover .cauldron-icon-over-the-sea {
      /* height: 20%; */
      /* bottom: 30px; */
    }
  }
}

@keyframes cauldron-icon-container {
    0% {
        transform: rotate(3deg) translateY(0px) rotate(3deg);
    }
    30% {
        transform: rotate(5deg) translateY(-20px) rotate(0deg);
    }
    60% {
        transform: rotate(4deg) translateY(5px) rotate(-10deg);
    }
    80% {
        transform: rotate(2deg) translateY(10px) rotate(-5deg);
    }
    100% {
        transform: rotate(3deg) translateY(0px) rotate(3deg);
    }
}
@keyframes cauldron-wave {
    0% {
        transform: translate(0px, 0px);
    }
    40% {
        transform: translate(0px, 5px);
    }
    90% {
        transform: translate(0px, -3px);
    }
    0% {
        transform: translate(0px, 0px);
    }
}