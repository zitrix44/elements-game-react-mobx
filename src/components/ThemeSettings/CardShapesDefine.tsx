import { observer } from "mobx-react-lite";
import { useEffect, useState } from "react";
import useRootStore from "../../Contexts";

const WIDTH = "1";
const FILL = "currentColor";
const STROKE = "currentColor";
const BORDER_WIDTH = 1.5;

type TfigureProps = {
    id?: string, 
    width?: string, 
    borderWidth?: number, 
    fill?: string, 
    stroke?: string,
    strokeOpacity?: string,
};
type TtoSVG = {
    xmlns: string;
    id?: string;
    width: string;
    height: string;
    viewBox: string;
    fill?: string;
    stroke?: string;
    strokeWidth?: string;
    strokeOpacity?: string;
};

const useSVG = ({width=WIDTH, borderWidth=BORDER_WIDTH, fill, stroke, strokeOpacity}: TfigureProps) => {
    const [toSvg, setToSvg] = useState<TtoSVG>({width, height: width, viewBox: "0 0 1 1", xmlns: "http://www.w3.org/2000/svg"});
    useEffect(()=>{
        const toSvg: TtoSVG = {
            xmlns: "http://www.w3.org/2000/svg",
            width: width,
            height: width,
            viewBox: `0 0 1 1`, //`${borderWidth/-2} ${borderWidth/-2} ${100+borderWidth} ${100+borderWidth}`,
            fill: fill || "none",
        };
        if (stroke) {
            // TODO: stroke не используется, viewBox константный
            toSvg.stroke = stroke;
            toSvg.strokeWidth = (borderWidth/100)+'px';
            if (strokeOpacity) toSvg.strokeOpacity = strokeOpacity;
        }
        // if (id) toSvg.id = id;
        setToSvg(toSvg);
    }, []);
    return [toSvg];
}

const BasicShapeClip = observer((props: TfigureProps) => {
    const [toSvg] = useSVG(props);
    return <>
        <svg {...toSvg}>
            <defs>
                <clipPath id={props.id} clipPathUnits="objectBoundingBox">
                    <path d="M0.15,0.01 L0.85,0.01 L0.99,0.15 L0.99,0.85 L0.85,0.99 L0.15,0.99 L0,0.85 L0,0.15 Z" />
                </clipPath>
            </defs>
        </svg>
    </>;
});

const BasicShapeStroke = observer((props: TfigureProps) => {
    const [toSvg] = useSVG(props);
    return <>
        <svg {...toSvg}>
            <defs>
                <clipPath id={props.id} clipPathUnits="objectBoundingBox">
                    <path d="M 0,0.14788361 0.14988204,-0.00199843 0.85332839,0.00399685 1.0032104,0.15787575 1.001212,0.85132996 0.85132996,0.99921358 0.14988204,1.0032104 0,0.85132996 0.02597955,0.83134569 0.14988204,0.96524031 0.84333627,0.96124346 0.97723088,0.84133784 0.97922931,0.17186473 0.83334412,0.02797798 0.16786788,0.02398113 0.02597955,0.16786788 Z" />
                    <path d="M 0,0.85332839 0.02597955,0.84133784 V 0.14588518 l -0.02797798,0.001998 z" />
                </clipPath>
            </defs>
        </svg>
    </>;
});

const RuinedShape = observer((props: TfigureProps) => {
    const [toSvg] = useSVG(props);
    return <>
        <svg {...toSvg}>
            <defs>
                <clipPath id={props.id} clipPathUnits="objectBoundingBox">
                    <path d="M0.10,0.0 L0.10,0.0 L0.30,0.100 L0.10,0.100 L0.0,0.90 L0.0,0.10 Z" />
                    {/* <path d="M50,0 L90,0 L100,10 L100,30 L40,20 Z" transform="translate(-4 4) rotate(-5 50 0)" />
                    <path d="M100,45 L100,90 L90,100 L70,100 Z" />
                    <path d="M95,40 L65,100 L40,100 L20,22 Z" /> */}
                </clipPath>
            </defs>
        </svg>
    </>;
});

const PentagonShapeClip = observer((props: TfigureProps) => {
    const [toSvg] = useSVG(props);
    return <>
        <svg {...toSvg}>
            <defs>
                <clipPath id={props.id} clipPathUnits="objectBoundingBox">
                    <path d="
                        m 0.1594897,0.98084328
                        c 0,0 -0.0219089,-0.11583094 -0.0566614,-0.2370056
                        C 0.0704749,0.63102794 0.00507444,0.48527703 0.00507444,0.48527703
                        l 3.3551e-4,-0.0131806
                        c 0,0 0.05133536,-0.0443906 0.11224996,-0.11706343 0.10393965,-0.1240029 0.27075923,-0.2886691 0.38794216,-0.34655444 0.0213873,0.00377464 2.5731e-4,-0.00412529 0.0217962,-0.0049947 0.10762276,0.04736282 0.22300736,0.20728112 0.33519314,0.32519831 0.0726262,0.0763366 0.13744999,0.13001059 0.13744999,0.13001059
                        l 1.416e-4,0.009927
                        c 0,0 -0.0712899,0.20857429 -0.10023788,0.32594793 -0.0283375,0.1148984 -0.0312318,0.18544809 -0.0312318,0.18544809 0,0 -0.0133728,0.002113 -0.0658948,0.002274 -0.0786376,-0.0110985 -0.1710639,-0.0187397 -0.21355382,-0.0203671 -0.0978767,-0.003749 -0.14670394,-0.002104 -0.22458999,0.002136 -0.0582262,0.00317 -0.11494312,0.0110733 -0.15837875,0.0191249 -0.0329818,-6.7628e-4 -0.0468062,-0.00234 -0.0468062,-0.00234
                        z
                    " />
                </clipPath>
            </defs>
        </svg>
    </>;
});

const PentagonShapeStroke = observer((props: TfigureProps) => {
    const [toSvg] = useSVG(props);
    return <>
        <svg {...toSvg}>
            <defs>
                <clipPath id={props.id} clipPathUnits="objectBoundingBox">
                    <path d="
                        m -0.0014131,0.47621517 0.02402272,0.007066
                        c 0,0 0.0253689,-0.0463072 0.10384747,-0.12793608 0.043744,-0.0455 0.16869736,-0.17835245 0.26198051,-0.25826988 0.0740706,-0.0634577 0.1245182,-0.08153062 0.1245182,-0.08153062 0,0 0.0395693,0.01359761 0.13700467,0.10893853 0.0758978,0.0742663 0.23295052,0.24201549 0.29009807,0.29210619 0.0353287,0.0309662 0.0547648,0.0511477 0.0547648,0.0511477
                        v -0.0211965
                        c 0,0 -0.072965,-0.067238 -0.12415352,-0.12025732
                        C 0.77261595,0.22472176 0.65639466,0.09612132 0.59795794,0.03651152 0.56435068,0.00222962 0.52426062,0.0028262 0.52426062,0.0028262
                        h -0.0310882
                        c 0,0 -0.16320953,0.10854684 -0.23478391,0.17487962 -0.0967506,0.0896652 -0.25980161,0.29850935 -0.25980161,0.29850935
                        z
                    " />
                    <path d="
                        m 0.0042393,0.49458549 0.01978342,-0.005652
                        c 0,0 0.05492104,0.14560592 0.0802619,0.23042024 0.0208205,0.0696848 0.058222,0.23307699 0.058222,0.23307699
                        l 0.0494585,0.0183703
                        c 0,0 0.1884101,-0.0230988 0.28968065,-0.0233434 0.0937374,-2.2641e-4 0.29534332,0.0219304 0.29534332,0.0219304
                        l 0.0635896,-0.0183703
                        c 0,0 0.0292626,-0.1598248 0.0491484,-0.23853267 0.0225526,-0.0892628 0.0794438,-0.26453142 0.0794438,-0.26453142
                        l 0.009892,0.0254358
                        c 0,0 -0.0578671,0.1866116 -0.0797884,0.28171739 -0.0183397,0.0795674 -0.0431515,0.24113012 -0.0431515,0.24113012
                        l -0.0989171,0.001413
                        c 0,0 -0.15950839,-0.0338399 -0.2416405,-0.0353453 -0.10497584,-0.001924 -0.31653453,0.0325193 -0.31653453,0.0325193
                        l -0.069242,-0.002826
                        c 0,0 -0.06751381,-0.27969144 -0.08713971,-0.34676244
                        C 0.03375861,0.54650235 0.0042393,0.49458549 0.0042393,0.49458549
                        Z
                    " />
                </clipPath>
            </defs>
        </svg>
    </>;
});

const ComixShapeClip = observer((props: TfigureProps) => {
    const [toSvg] = useSVG(props);
    return <>
        <svg {...toSvg}>
            <defs>
                <clipPath id={props.id} clipPathUnits="objectBoundingBox">
                    <path d="
                        m 0.18270378,0.98075387
                        c 0,0 -0.11925215,0.0180839 -0.14789875,-0.0736838 -0.03164469,-0.1013718 0.03827648,-0.25225978 0.03827648,-0.25225978 0,0 0.09872666,0.0275289 0.22763411,0.0110731 0.12890745,-0.0164558 0.12754205,-0.0578452 0.12754205,-0.0578452 0,0 -0.10451603,-0.0312067 -0.150801,-0.0499643 -0.046285,-0.0187576 -0.071005,-0.03678 -0.0962145,-0.0669662 -0.02119,-0.0253732 -0.0400854,-0.0523558 -0.0375008,-0.10381456 0.002585,-0.0514587 0.0289139,-0.11012286 0.0535787,-0.13735442
                        C 0.27129829,0.16826189 0.35110597,0.12337769 0.45195846,0.07514386 0.55281094,0.02691003 0.68988949,0.0029232 0.68988949,0.0029232
                        c 0,0 0.0645289,-0.02169943 0.12226331,0.0523565 0.0577344,0.07405593 0.0136683,0.13765543 0.0136683,0.13765543 0,0 -0.0922494,8.5848e-4 -0.24791296,0.0627341 -0.15566359,0.0618757 -0.13649574,0.1594337 -0.13649574,0.1594337 0.006762,0.0433171 0.2335905,-5.3123e-4 0.32907805,0.008431 0.0954875,0.008962 0.12256566,0.029571 0.12256566,0.029571 0,0 0.0747479,1.03e-5 0.0920438,0.10086281
                        C 1.0023959,0.65482023 0.95770192,0.71750332 0.89890262,0.784895 0.84010322,0.8522867 0.7536454,0.8774811 0.63262013,0.90038075 0.51159485,0.92328045 0.1827038,0.98075345 0.18270378,0.98075387
                        Z
                    " />
                </clipPath>
            </defs>
        </svg>
    </>;
});

const ComixShapeStroke = observer((props: TfigureProps) => {
    const [toSvg] = useSVG(props);
    return <>
        <svg {...toSvg}>
            <defs>
                <clipPath id={props.id} clipPathUnits="objectBoundingBox">
                    <path d="
                        m 0.13403898,0.85234854
                        c 0,0 -0.04391775,-0.0713823 -0.05087165,-0.24305345 -0.0055563,-0.1371686 0.01869725,-0.39770274 0.03815374,-0.41403869 0.0222261,-0.0186614 0.014672,-0.0426114 0.21158902,-0.0676413 0.14479153,-0.0184043 0.3930396,0.0102687 0.49361318,-0.00424 0.0522896,-0.007543 0.0777351,-0.0183904 0.0777351,-0.0183904
                        l 0.0114313,0.0137158
                        c 0,0 0.005356,0.20039931 0.018508,0.29925865 0.01511,0.1135769 0.031199,0.33366518 0.031199,0.33366518 0,0 -0.004272,0.097609 -0.01418,0.12945626 -0.009875,0.0317423 -0.0233499,0.0483406 -0.0451703,0.0613124 -0.0595693,0.035413 -0.12927679,0.0321526 -0.27156498,0.0319321
                        C 0.49552675,0.97410981 0.17219272,0.91876432 0.17219272,0.91876432
                        l 0.0136686,-0.0185046 -9.5066e-4,-0.0253016
                        c 0,0 0.33841339,0.0840293 0.47359785,0.0801815 0.13801183,-0.003928 0.15471483,0.00352 0.2319938,-0.0268777 0.0220934,-0.008691 0.0326015,-0.0367385 0.0404236,-0.0586405 0.0133744,-0.0374483 0.0231659,-0.11941028 0.0231659,-0.11941028 0,0 -0.0124723,-0.18914056 -0.0250674,-0.28512395
                        C 0.91429959,0.35287374 0.9072111,0.13000533 0.9072111,0.13000533
                        c 0,0 -0.0974586,0.0101398 -0.1653652,0.0134719 -0.10087614,0.00495 -0.29268995,-0.0182771 -0.38932789,-0.00592 -0.12563915,0.0160653 -0.19758631,0.0466928 -0.21706593,0.0760697 -0.0219516,0.0331049 -0.049579,0.27643107 -0.03956683,0.40838628 0.0073052,0.096279 0.03260698,0.22771798 0.03815373,0.23033566
                        z
                    " />
                    <path d="
                        m 0.88676757,0.11058756
                        c 0,0 0.009385,-0.00134 0.026665,-0.007648 0.0177423,-0.0064767 0.0353467,-0.02025715 0.0353467,-0.02025715 0,0 -8.816e-4,0.01336832 0.001034,0.01963704 0.001761,0.005763 0.009302,0.0155029 0.009302,0.0155029 0,0 -0.015912,0.007116 -0.0338359,0.0108348 -0.0263577,0.005468 -0.0333435,0.002601 -0.0333435,0.002601
                        z
                    " />
                </clipPath>
            </defs>
        </svg>
    </>;
});

const CardShapesDefine = observer(()=>{
    const [store] = useRootStore();
    const shapesList = store.themeStore.shapesList;
    return <>
        <div data-test-id="CardShapesDefine">
            <div data-test-id="CardShapesDefine-clipId">
                <BasicShapeClip id={shapesList.basic.clipId} fill={FILL} />
                <RuinedShape id={shapesList.ruined.clipId} fill={FILL} />
                <PentagonShapeClip id={shapesList.pentagon.clipId} fill={FILL} />
                <ComixShapeClip id={shapesList.comix.clipId} fill={FILL} />
            </div>
            <div data-test-id="CardShapesDefine-borderId">
                <BasicShapeStroke id={shapesList.basic.borderId} />
                <RuinedShape id={shapesList.ruined.borderId} stroke={STROKE} strokeOpacity="0.5" />
                <PentagonShapeStroke id={shapesList.pentagon.borderId} stroke={STROKE} />
                <ComixShapeStroke id={shapesList.comix.borderId} stroke={STROKE} />
            </div>
        </div>
    </>
});

export default CardShapesDefine;